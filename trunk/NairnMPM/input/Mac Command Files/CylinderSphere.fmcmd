! ********** Introduction **********
! Cylinder or sphere with external pressure
!
! Cylinder Radial Stress
!    sr = -Po (1 - ri^2/r^2)/(1 - ri^2/r0^2)
!
! Sphere Radial Stress
!    sr = -Po (1 - ri^3/r^3)/(1 - ri^3/r0^3)Ê
!
! This file is in development pending best way to handle boundary conditions

Title "Presurized Cylinder or Sphere"
Name "John Nairn"

! Header
Header
   Pressurized Cylinder or Sphere (if axisymetric)
EndHeader

! ********** Parameters Section **********

! pick analysis type - "Plane Strain MPM" for cylinder or "Axisymmetric MPM" for sphere
#type="Plane Strain MPM"

#cell=2                	! cell size (square cells)
#outerradius=20         ! outer radius mm (mult of cell)
#innerradius=10         ! inner radius in mm (mult of cell)
#thickness=1            ! Thickness in mm (cylinder only)
#border=10				! distance around the edges (mult of cell)

#ccwAngle=90			! angle in ccw direction (max 90 if axisymmetric or 180 if not)
#cwAngle=0				! angle in cw direction (max 90 if axisymmetric or 180 if not)

! Pick material: "isotropic","neohookean"
#matname="neohookean"

! mass stress (negative of max pressure)
#pmax=500

! load by "force" or "traction"
#load="traction"

Analysis #type
MPMMethod USF,CPDI
LeaveLimit 1

if #type="Place Strain MPM"
  Archive "Results/Cyinder/cylinder"
  #maxAngle=90
else
  Archive "Results/Sphere/sphere"
  #maxAngle=180
endif
if #ccwAngle>#maxAngle
  #ccwAngle=#maxAngle
endif
if #cwAngle>#maxAngle
  #cwAngle=#maxAngle
endif
#degtorad=3.14159265359/180

! ********** Materials Section **********
if #matname="isotropic"
  Material #matname,"Polymer","Isotropic"
    E 2500
    nu .33
    a 60
    rho 1.2
  Done
endif

if #matname="neohookean"
  #G1=2500/(2*(1+.33))
  #Kbulk=2500/(3*(1-2*.33))
  Material #matname,"Neohookean Material","Mooney"
    G1 #G1
    G2 0
    K #Kbulk
    a 60
    rho 1.2
  Done
endif

! output stress solution
if #type="Plane Strain MPM"
  Comment "srr = "&(#pmax/(1-#innerradius^2/#outerradius^2))&"*(1-"&(#innerradius^2)&"/r^2)"
else
  Comment "srr = "&(#pmax/(1-#innerradius^3/#outerradius^3))&"*(1-"&(#innerradius^3)&"/r^3)"
endif

#maxTime=.25
#prate=#pmax/#maxTime

ArchiveTime #maxTime/20
TimeStep 1e6,#maxTime,.1

GlobalArchive "sxx"
GlobalArchive "sxy"
GlobalArchive "syy"
GlobalArchive "alpha"
GlobalArchiveTIme #maxTime/100

!FeedbackDamping 10

! ********** Grid and Material Points Section **********
#xmax=#outerradius+#border
#xmin=-#cell
if #ccwAngle>90
  #xmin=#outerradius*cos(#ccwAngle*#degtorad)-#border
else
  #xmin=-#cell
endif
if #cwAngle>90
  #xtest=#outerradius*cos(#cwAngle*#degtorad)-#border
  if #xtest<#xmin
    #xmin=#xtest
  endif
endif
#xmin=#cell*int(#xmin/#cell+.5)
GridHoriz (#xmax-#xmin)/#cell

if #ccwAngle>90
  #ymax=#outerradius+#border
else if #ccwAngle>0
  #ymax=#outerradius*sin(#ccwAngle*#degtorad)+#border
else
  #ymax=#cell
endif
#ymax=#cell*int(#ymax/#cell+.5)
if #cwAngle>90
  #ymin=-#outerradius-#border
else if #cwAngle>0
  #ymin=-#outerradius*sin(#cwAngle*#degtorad)-#border
else
  #ymin=-#cell
endif
#ymin=#cell*int(#ymin/#cell+.5)
GridVert (#ymax-#ymin)/#cell

if #type="Plane Strain MPM"
  GridThickness #thickness
endif

GridRect #xmin,#xmax,#ymin,#ymax

Hole
  PolyPt 0,0
  PolyPt #outerradius*cos(#ccwAngle*#degtorad),#outerradius*sin(#ccwAngle*#degtorad)
  PolyPt #outerradius*cos(#ccwAngle*#degtorad),#ymax
  PolyPt #xmin,#ymax
  PolyPt #xmin,#ymin
  PolyPt #outerradius*cos(#cwAngle*#degtorad),#ymin
  PolyPt #outerradius*cos(#cwAngle*#degtorad),-#outerradius*sin(#cwAngle*#degtorad)
  if #innerradius>0
    Oval -#innerradius,#innerradius,-#innerradius,#innerradius
  endif
EndRegion
Region #matname,0,0,#thickness
  Oval -#outerradius,#outerradius,-#outerradius,#outerradius
EndRegion

! ********** Optional Calculations Section **********
if #load="force"
  if #type="Axisymmetric MPM"
    #pp=(#prate*#cell/2)&"*D"
  else
    #pp=#prate*#cell*#thickness/2
  endif
  LoadArc -#outerradius,-#outerradius,#outerradius,#outerradius,-#cwAngle,#ccwAngle,#cell/2
    Load x,function,#pp&"*t*x/sqrt(x^2+y^2)"
    Load y,function,#pp&"*t*y/sqrt(x^2+y^2)"
  EndLoadArc

else if #load="traction"
  if #cell!=2
    Stop "tractions can only be used for 2 mm cells"
  endif
  if #ccwAngle>90
    Stop "tractions require #ccwAngle<=90"
  endif
  if #cwAngle>0
    Stop "tractions require #cwAngle=0"
  endif
  #ns=12
  #x[1]=2
  #x[2]=2
  #x[3]=1
  #x[4]=.5
  #x[5]=1
  #x[6]=.5
  #x[7]=.5
  #x[8]=.5
  #x[9]=.5
  #x[10]=.5
  #x[11]=.5
  #x[12]=.5

  #xloc=0
  #yloc=0
  #yn=#outerradius-#cell/4
  #xn=#outerradius-#cell/4
  Repeat "#i",1,#ns
    #xend=#xloc+#x[#i]*#cell
    LoadLine #xloc,#yn,#xend,#yn
      Traction "y",3,"linear",#prate
    EndLoadLine
    #xloc=#xend
    #ind=#ns+1-#i
    #yn-=#x[#ind]*#cell
    
    #yend=#yloc+#x[#i]*#cell
    LoadLine #xn,#yloc,#xn,#yend
      Traction "x",2,"linear",#prate
    EndLoadLine
    #yloc=#yend
    #ind=#ns+1-#i
    #xn-=#x[#ind]*#cell
  EndRepeat
  
endif

if #cwAngle=0
  MoveLine -#cell,-#cell/2,#xmax,-#cell/2,0.51*#cell
    Velocity y,constant,0
  EndMoveLine
else if #cwAngle=90
  MoveLine -#cell/2,#cell,-#cell/2,#ymin,0.51*#cell
    Velocity x,constant,0
  EndMoveLine
endif

if #ccwAngle=0
  MoveLine -#cell,#cell/2,#xmax,#cell/2,0.51*#cell
    Velocity y,constant,0
  EndMoveLine
else if #ccwAngle=90
  MoveLine -#cell/2,-#cell,-#cell/2,#ymax,0.51*#cell
    Velocity x,constant,0
  EndMoveLine
else if #ccwAngle=180
  if #cwAngle!=180
    MoveLine -#cell,-#cell/2,#xmin,-#cell/2,0.51*#cell
      Velocity y,constant,0
    EndMoveLine
  endif
else
  #cs=cos(#degtorad*#ccwAngle)
  #sn=sin(#degtorad*#ccwAngle)
  MoveLine 0,0,#xmax*#cs,#xmax*#sn,0.25*#cell
    Velocity skewxy,constant,0,0,90-#ccwAngle
  EndMoveLine
endif

