#summary Creating a New Material Type for NairnMPM
#labels NairnMPM

= Introduction =

These notes explain how to create a new material class for use in NairnMPM.

= Details =

== Getting Started ==

Duplicate the `NewMaterial.cpp` and `NewMaterial.hpp` files, which are templates for a new material class. Edit the files and change `NewMaterial` to the new material's class name. The template is a subclass of `MaterialBase`. Normally the new material will be a subclass of another class. If so, change `MaterialBase` references, as needed, to the actual parent class.

The following chart shows all materials in `nairn-mpm-fea`. Materials to the right are subclasses of materials to the left. If the cell to the left is empty, the material is subclass of the next material above and to the left. Materials in UPPERCASE or actual materials. Materials mixed cases are abstract classes. All material inherit from `MaterialBase` class (which is not shown in the table). Finally, materials in <font color="green">green</font> are in both FEA and MPM; materials in <font color="red">red</font> are only in FEA; all the rest are only in MPM.

|| <font color="green">`Elastic`</font> || <font color="green">`ISOTROPIC=1`</font> || `IsoPlasticity`    || `VONMISESHARDENING=9` ||                                 ||    ||
||             ||                           ||                              || `MGSCGLMATERIAL=17`       || `SLMATERIAL=18`  ||    ||
||             ||                           ||                              || `JOHNSONCOOK=16`       ||           ||    ||
||             ||                           || `BISTABLEISO=10` ||                                              ||                                  ||    ||
||     || <font color="green">`TRANSISO1(2)=2,3`</font> || <font color="green">`ORTHO=4`</font> ||   `AnisoPlasticity`       || `HILLPLASTIC=15` || `WOODMATERIAL=19` ||
|| `VISCOELASTIC=7` ||          ||                           ||                                                  ||                                 ||    ||
|| `HyperElastic` || `MOONEYRIVLIN=8` ||         ||                                                  ||                                 ||   || 
||  || `HEANISOTROPIC=21` ||         ||                                                  ||                                 ||    || 
|| <font color="red">`INTERFACEPARAMS=5`</font> ||        ||         ||                         ||                                 ||    ||
|| `RIGIDMATERIAL=11` ||                      ||         ||                                                  ||                                 ||    ||
|| `TractionLaw`  || `COHESIVEZONEMATERIAL=12` || `LINEARTRACTIONMATERIAL=13` ||           ||         ||   ||               
||    ||   || `TRILINEARTRACTIONMATERIAL=20` ||           ||                          ||    ||
||                               || `CUBICTRACTIONLAW=14` ||                      ||           ||                          ||    ||

When you create a new material, you should fit it into the above hierarchy and define a constant (in UPPERCASE) that will be a unique number for that material. The above table uses numbers 1 through 21 (except for 6). New materials need a new number. Once the number and constant are determined, define the constant in the new material header file and be sure to add this number as an option  to the `Material` command in the DTD file.

== Editing Required in Core Code ==

Almost all coding will be done in the new material class files, but a few places in the core code need to be edited to recognize the new material:

  # In `MaterialController::AddMaterial(int matID,char ``*``matName)`- - add a new case in the `switch(matID)` section to call the default constructor of the new material when `matID` matches the tag created above.
  # Include the new material's header file at the top of `MaterialController.hpp`
  # Edit the makefile and add the new material's header file to the header file's needed to compile `MaterialController.hpp`
  # Edit the makefile to compile the new material's file too (see a similar material for example of what is needed).
  # Add any newly defined material properties to the DTD file

== Editing the Material Class ==

Edit the template files. Change all occuranced of `NewMaterial` to the new material's class name. Similarly, if the new material subclasses some other material, edit all occurances of `MaterialBase` and change to the actual parent class.

Finally, go through each method and keep, edit, or delete. Any method that is deleted from source should be removed from header file as well. See comments in the template file for the function of each method.

== Creating New Material Properties ==

Usually a newly-created material type will have additional material properties. To create such properties, you need the following steps for each one:

  # Define the property variable in the `.hpp` file (usually scalars). It is usually best to define these properties `protected` section of the class, although `public` properties are sometimes needed.
  # To allow the property in input files, select a unique property name. Define that property in the `DTD` file, usually as a simple `XML` element like `<!ELEMENT prop (#PCDATA)>`, where `prop` is the new property name. In addition, add that property's name to the list of allowed elements within the `Material` element definition in the `DTD` file.
  # Edit the new material's `InputMat()` method and look for that property by name. If found, set pointer type (_e.g._, `DOUBLE_NUM` or `INT_NUM`) and return a pointer to the class variable define in the `.hpp` file..
  # If desired, set default value for the property in the material's constructor method.
  # If desired, check that the final value is acceptable in the `VerifyProperties()` method. If it is not, return an error message as a string.
  # Print the property to the output file (usually in the `PrintMechanicalProperties()` method)
  # Use it as needed in the material response methods

== Traction Law Materials (only for traction law materials) ==

There is currently no template code for traction law materials. One should be created the next time a new traction law is needed. Here are some notes on traction law methods

  * The base class for all traction laws in `TractionLaw.cpp`. It handles some things:
    # Overrides `MPMConstLaw()` with empty methods because not needed for traction laws
    # Blocks transport law printing (not needed) and no other transport stuff is needed either
  * `VerifyProperties()` - This method should check properties, but do not call `MaterialBase` class method. It is OK to fall up to `TractionLaw` because that class will block further calls.
  * `InitialLoadMechProps()` - Never called for traction laws
  * `CrackTractionLaw()` - Calculate tractions for current opening and shear cod and will be the core coding needed for new traction laws.
  * `CrackTractionEnergy()` - Calculate full energy or released energy for current COD.

== Material Methods - Calculations called during MPM steps ==

Below is summary of key methods involved with MPM calculations in each time step. The first four are called first to allow update of material properties when those material properties depend on the current state of the particle (_e.g._, properties that depend on temperature, moisture, orientation, or current particles stress or stain). Once the properties are set, one of the last two are calculated to implement the constitutive law.

  * `virtual void LoadMechanicalProps(MPMBase *,int)` - This method is called just before the constitutive law on each time step. You can set any parameters for the material that depend on the current state of the particle. Things that never change (_i.e._, properties that are independent of particle state) should be calculated in `InitialLoadMechProps()` instead. NOTE: Some materials also used in FEA make use of `LoadMechProps()` in this task, but that method is limited to 2D because it only inputs a single rotation about the `z` axis.
  * `virtual void LoadTransportProps(MPMBase *)` - This method is called when looping over material points to store parameters needed in transport calculations (tensors). It is called prior to the transport tasks to `AddForces()`. It is only needed for anistropic materials or for materials whose transport properties change depending on particle state. This method should load the required values into `diffusionTensor` and `kCondTensor` in the `MaterialBase` class. Transport properties that never change (_i.e._, independent of particle state) should be calculated in `InitialLoadTransProps()` instead.
  * `virtual double GetHeatCapacity(MPMBase *)` - When conduction is activated, this method is called before calculations that depend on heat capacity C<sub>P</sub>. If C<sub>P</sub> changes with particle state, return current heat capacity using units of J/(g-K). This method can be ignored if C<sub>P</sub> is a constant (note that the `heatCapacity` variable in `MaterialBase` is internally stored in J/(g-K) during calculations, although it is input as J/(kg-K)).
  * `virtual double GetHeatCapacityVol(MPMBase *mptr)` - This method has the same function as `GetHeatCapacity()` except applies to constant volume heat capacity C<sub>V</sub>, and the base class variable is `heatCapacityVol`.
  *  `virtual void MPMConstLaw(MPMBase *,double,double,double,double,double,int)` - This methods applies constitutive law for the material in 2D calculations and updates all needed particle properties. The required updates include stress (should be a specific stress), strain, plastic strain, rotational strain, strain energy, plastic energy, dissipated energy (dissipated needed if want to couple to conduction), and any material history dependent variables defined for the material. To support thermal and solvent expansion, include their effect on the constitutive law. Then input `dvij` are components of velocity gradient times the time step, which gives components of the deformation gradient change.
  * `virtual void MPMConstLaw(MPMBase *,double,double,double,double,double,double,double,double,double,double,int)` - This method is the same as the previous method except it applies to 3D calculations and the extra input variables define the full change in the 3D deformation gradient.
		

== Fracture Methods ==

The methods deal with fracture and are currently handled for all materials in the base class.

  * `virtual MaterialBase *SetFinalPropagate(void)` - hould be enough in default method to set up fracture criterion
  * `virtual Vector ConvertJToK(Vector,Vector,Vector,int)` - Convert J Integral to K or stress intensity factor. Default returns zero.
  * `virtual int CriterionNeeds(void)` - Determines if J and/or K is needed.
  * `virtual int ShouldPropagate(CrackSegment *,Vector &,CrackHeader *,int np)` - Determine if crack chould grow.
  * `virtual bool ControlCrackSpeed(CrackSegment *,double &)` - Adjust crack speed
  * `virtual bool SelectDirection(CrackSegment *,Vector &,CrackHeader *)` - 
  * `virtual void HoopDirection(double,double,Vector *)` - 
  * `void RotateDirection(Vector *,double,double)` - 
  * `virtual double CrackPropagationAngleFromStrainEnergyDensityCriterion(double,double,double)` -  - Used in one fracture criterion
  * `static const char *PreferredDirection(int)` - 