#summary Creating a new element for NairnFEA
#labels NairnFEA

= Introduction =

This page explains how to create a new type of element for NairnFEA.

= Add an Element for NairnFEA and/or NairnMPM =

The following sections described the various tasks needed to support a new element type in NairnFEA and NairnMPM. Since NairnMPM is typcially based only on 4-node 2D and 8-node 3D elements, these tasks are mostly about adding them for NairnFEA.

== Create New Element Class Source Files ==

The first step is to create a new class that is a subclass of an existing element or a subclass of `ElementBase` if it is  new class of element. The steps for this task are:

  # Define new source for the element and create `.cpp` and `.hpp` files
  # Define a constant (numeric ID) for the new element. To avoid potential future conflicts, all these constants are defines in `ElementBase.hpp`.
  # Override and implement (as needed) the following methods:
    * ElementName(void) - return numeric code defined in `ElementBase.hpp`
    * NumberNodes(void) - return number of nodes
    * NumberSides(void) - return number of sides
    * GetArea(void) - element area (only used in MPM to decide on wave speed)
    * FaceNodes(void) - return number of nodes on each face
    * PtInElement() - if point is in any element return 1 otherwise 0
    * ShapeFunction() - load shape functions, their derivatives (if requested), and data for axisymmetric calculations (if requested).

== Create Instances of Elements ==

During initialization of a calculation, the mesh is created and divided into elements. The tasks in this section are needed to be able to add the new element to a mesh.

  # Include new elements' header file in `ElementsController.cpp`.
  # The `ElementsController.cpp` code handles most tasks when creating elements for a mesh. New elements will need some element-specific modifications to this source file:
    * CreateElement()` - Elements can be created from XML `elem` command, which has the format
{{{
<elem type='2' matl='1' angle='0' thick='10'>1,5,69,68</elem>
}}}
    where type is element code (numeric ID defined above), `matl` is numerical material ID, `angle` is material angle for anisotropic materials, and `thick` is thickness in mm. The characters in the command are usually comma-separated list of nodes (but a custom element could define a different meaning to the data. To support creation of elements with this command, edit the `CreateElement()` method in `ElementsController.cpp` and define a new case for the new element to handle the above parameters.
    * MeshElement() - create element(s) and write corresponding constructor
  c. ElementsCompatible() - document compatible types
  d. HasMidsideNodes() - return true if has them
  e. ElementSides() - return number of sides

3. Will not work in MPM generators unless code is added
    there too.

4. Test Mesh Creation (but do not run analysis yet)

TASK 0: INITIALIZE
--------------------------------------------------------------
1. Support MaxMinNode() - built in to ElementBase.cpp

TASK 1: ALLOCATE R VECTOR
--------------------------------------------------------------
1. Support CalcEdgeLoads() which is called by GetConsistentLoads(re,np)
	called from ForcesOnEdges() is element can have stress boundary
	conditions
	
TASK 2: GET STIFFNESS MATRIX
--------------------------------------------------------------
1. Calculate element stiffness matrix in Stiffness() (called
	in BuildStiffnessMatrix()). If use IsoparametricStiffness()
	need to set numGauss and gaussSet.

2. Building stiffness matrix requires support for ShapeFunction()
	MPM as alternative ShapeFunction(), but FEA has just one.

TASK 6: OUTPUT RESULTS
--------------------------------------------------------------
1. Support ForceStress() which is called in ForceStressEnergyResults(void).

2. If use IsoparametricForceStress() need to fill in option for
	extrapolation to nodes for element type. Also need to set numGauss
	and gaussSet.